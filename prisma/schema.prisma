// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures =  ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {

id String @id @default(uuid()) 
username String @unique

imageUrl String @db.Text

externalUserId String @unique 

bio String? @db.Text
// following: an array of follow records
following Follow[] @relation("Following")
followedBy Follow[] @relation("Followedby")

createdAt DateTime @default (now()) 
updatedAt DateTime @updatedAt

stream Stream?
}

//manage follow relationship
model Follow{
  id String @id @default(uuid())
  followerId String
  followingId String
  follower User @relation(name:"Following", fields:[followerId ], references:[id],onDelete:Cascade)
  following User @relation(name:"Followedby", fields:[followingId ], references:[id],onDelete:Cascade)
  //cascade: when a parent record is deleted, all related child records should also be automatically deleted

  createdAt DateTime @default (now()) 
  updatedAt DateTime @updatedAt

  @@unique([followerId,followingId]) //Ensures each pair of followerId and followingId is unique
  @@index([followerId ]) // Creates an index on the followingId field.
  @@index([followingId ]) 
} 

model Stream {
  id                       String   @id @default(uuid())
  name                     String   @db.Text
  thumbnailUrl             String?  @db.Text

  ingressId                String?  @unique
  serverUrl                String?  @db.Text
  streamKey                String?  @db.Text

  isLive                   Boolean  @default(false)
  isChatEnabled            Boolean  @default(true)
  isChatDelayed            Boolean  @default(false)
  isChatFollowersOnly      Boolean  @default(false)

  userId                   String   @unique
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([ingressId])
  @@fulltext([name])
}
